// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pidx/image/v1/service.proto

package imagev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/lewdzifer/pidx/proto/generated/go/pidx/image/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ImageServiceName is the fully-qualified name of the ImageService service.
	ImageServiceName = "pidx.image.v1.ImageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ImageServiceGetImageProcedure is the fully-qualified name of the ImageService's GetImage RPC.
	ImageServiceGetImageProcedure = "/pidx.image.v1.ImageService/GetImage"
	// ImageServiceDownloadImageProcedure is the fully-qualified name of the ImageService's
	// DownloadImage RPC.
	ImageServiceDownloadImageProcedure = "/pidx.image.v1.ImageService/DownloadImage"
	// ImageServiceDownloadImageFileProcedure is the fully-qualified name of the ImageService's
	// DownloadImageFile RPC.
	ImageServiceDownloadImageFileProcedure = "/pidx.image.v1.ImageService/DownloadImageFile"
	// ImageServiceUploadImageFileProcedure is the fully-qualified name of the ImageService's
	// UploadImageFile RPC.
	ImageServiceUploadImageFileProcedure = "/pidx.image.v1.ImageService/UploadImageFile"
	// ImageServiceDeleteImageProcedure is the fully-qualified name of the ImageService's DeleteImage
	// RPC.
	ImageServiceDeleteImageProcedure = "/pidx.image.v1.ImageService/DeleteImage"
	// ImageServiceDeleteImageFileProcedure is the fully-qualified name of the ImageService's
	// DeleteImageFile RPC.
	ImageServiceDeleteImageFileProcedure = "/pidx.image.v1.ImageService/DeleteImageFile"
)

// ImageServiceClient is a client for the pidx.image.v1.ImageService service.
type ImageServiceClient interface {
	// GetImage retrieves metadata for an image by its unique identifier.
	GetImage(context.Context, *connect.Request[v1.GetImageRequest]) (*connect.Response[v1.GetImageResponse], error)
	// DownloadImage streams the binary content of an image in chunks.
	// The metadata of the image is included in the first chunk.
	DownloadImage(context.Context, *connect.Request[v1.DownloadImageRequest]) (*connect.ServerStreamForClient[v1.DownloadImageResponse], error)
	// DownloadImageFile streams the binary content of a specific image file in chunks.
	// The metadata of the image file is included in the first chunk.
	DownloadImageFile(context.Context, *connect.Request[v1.DownloadImageFileRequest]) (*connect.ServerStreamForClient[v1.DownloadImageFileResponse], error)
	// UploadImageFile uploads an image file by streaming its binary content in chunks.
	UploadImageFile(context.Context) *connect.ClientStreamForClient[v1.UploadImageFileRequest, v1.UploadImageFileResponse]
	// DeleteImage deletes an image and all associated files.
	DeleteImage(context.Context, *connect.Request[v1.DeleteImageRequest]) (*connect.Response[v1.DeleteImageResponse], error)
	// DeleteImageFile deletes a specific image file.
	DeleteImageFile(context.Context, *connect.Request[v1.DeleteImageFileRequest]) (*connect.Response[v1.DeleteImageFileResponse], error)
}

// NewImageServiceClient constructs a client for the pidx.image.v1.ImageService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewImageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ImageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	imageServiceMethods := v1.File_pidx_image_v1_service_proto.Services().ByName("ImageService").Methods()
	return &imageServiceClient{
		getImage: connect.NewClient[v1.GetImageRequest, v1.GetImageResponse](
			httpClient,
			baseURL+ImageServiceGetImageProcedure,
			connect.WithSchema(imageServiceMethods.ByName("GetImage")),
			connect.WithClientOptions(opts...),
		),
		downloadImage: connect.NewClient[v1.DownloadImageRequest, v1.DownloadImageResponse](
			httpClient,
			baseURL+ImageServiceDownloadImageProcedure,
			connect.WithSchema(imageServiceMethods.ByName("DownloadImage")),
			connect.WithClientOptions(opts...),
		),
		downloadImageFile: connect.NewClient[v1.DownloadImageFileRequest, v1.DownloadImageFileResponse](
			httpClient,
			baseURL+ImageServiceDownloadImageFileProcedure,
			connect.WithSchema(imageServiceMethods.ByName("DownloadImageFile")),
			connect.WithClientOptions(opts...),
		),
		uploadImageFile: connect.NewClient[v1.UploadImageFileRequest, v1.UploadImageFileResponse](
			httpClient,
			baseURL+ImageServiceUploadImageFileProcedure,
			connect.WithSchema(imageServiceMethods.ByName("UploadImageFile")),
			connect.WithClientOptions(opts...),
		),
		deleteImage: connect.NewClient[v1.DeleteImageRequest, v1.DeleteImageResponse](
			httpClient,
			baseURL+ImageServiceDeleteImageProcedure,
			connect.WithSchema(imageServiceMethods.ByName("DeleteImage")),
			connect.WithClientOptions(opts...),
		),
		deleteImageFile: connect.NewClient[v1.DeleteImageFileRequest, v1.DeleteImageFileResponse](
			httpClient,
			baseURL+ImageServiceDeleteImageFileProcedure,
			connect.WithSchema(imageServiceMethods.ByName("DeleteImageFile")),
			connect.WithClientOptions(opts...),
		),
	}
}

// imageServiceClient implements ImageServiceClient.
type imageServiceClient struct {
	getImage          *connect.Client[v1.GetImageRequest, v1.GetImageResponse]
	downloadImage     *connect.Client[v1.DownloadImageRequest, v1.DownloadImageResponse]
	downloadImageFile *connect.Client[v1.DownloadImageFileRequest, v1.DownloadImageFileResponse]
	uploadImageFile   *connect.Client[v1.UploadImageFileRequest, v1.UploadImageFileResponse]
	deleteImage       *connect.Client[v1.DeleteImageRequest, v1.DeleteImageResponse]
	deleteImageFile   *connect.Client[v1.DeleteImageFileRequest, v1.DeleteImageFileResponse]
}

// GetImage calls pidx.image.v1.ImageService.GetImage.
func (c *imageServiceClient) GetImage(ctx context.Context, req *connect.Request[v1.GetImageRequest]) (*connect.Response[v1.GetImageResponse], error) {
	return c.getImage.CallUnary(ctx, req)
}

// DownloadImage calls pidx.image.v1.ImageService.DownloadImage.
func (c *imageServiceClient) DownloadImage(ctx context.Context, req *connect.Request[v1.DownloadImageRequest]) (*connect.ServerStreamForClient[v1.DownloadImageResponse], error) {
	return c.downloadImage.CallServerStream(ctx, req)
}

// DownloadImageFile calls pidx.image.v1.ImageService.DownloadImageFile.
func (c *imageServiceClient) DownloadImageFile(ctx context.Context, req *connect.Request[v1.DownloadImageFileRequest]) (*connect.ServerStreamForClient[v1.DownloadImageFileResponse], error) {
	return c.downloadImageFile.CallServerStream(ctx, req)
}

// UploadImageFile calls pidx.image.v1.ImageService.UploadImageFile.
func (c *imageServiceClient) UploadImageFile(ctx context.Context) *connect.ClientStreamForClient[v1.UploadImageFileRequest, v1.UploadImageFileResponse] {
	return c.uploadImageFile.CallClientStream(ctx)
}

// DeleteImage calls pidx.image.v1.ImageService.DeleteImage.
func (c *imageServiceClient) DeleteImage(ctx context.Context, req *connect.Request[v1.DeleteImageRequest]) (*connect.Response[v1.DeleteImageResponse], error) {
	return c.deleteImage.CallUnary(ctx, req)
}

// DeleteImageFile calls pidx.image.v1.ImageService.DeleteImageFile.
func (c *imageServiceClient) DeleteImageFile(ctx context.Context, req *connect.Request[v1.DeleteImageFileRequest]) (*connect.Response[v1.DeleteImageFileResponse], error) {
	return c.deleteImageFile.CallUnary(ctx, req)
}

// ImageServiceHandler is an implementation of the pidx.image.v1.ImageService service.
type ImageServiceHandler interface {
	// GetImage retrieves metadata for an image by its unique identifier.
	GetImage(context.Context, *connect.Request[v1.GetImageRequest]) (*connect.Response[v1.GetImageResponse], error)
	// DownloadImage streams the binary content of an image in chunks.
	// The metadata of the image is included in the first chunk.
	DownloadImage(context.Context, *connect.Request[v1.DownloadImageRequest], *connect.ServerStream[v1.DownloadImageResponse]) error
	// DownloadImageFile streams the binary content of a specific image file in chunks.
	// The metadata of the image file is included in the first chunk.
	DownloadImageFile(context.Context, *connect.Request[v1.DownloadImageFileRequest], *connect.ServerStream[v1.DownloadImageFileResponse]) error
	// UploadImageFile uploads an image file by streaming its binary content in chunks.
	UploadImageFile(context.Context, *connect.ClientStream[v1.UploadImageFileRequest]) (*connect.Response[v1.UploadImageFileResponse], error)
	// DeleteImage deletes an image and all associated files.
	DeleteImage(context.Context, *connect.Request[v1.DeleteImageRequest]) (*connect.Response[v1.DeleteImageResponse], error)
	// DeleteImageFile deletes a specific image file.
	DeleteImageFile(context.Context, *connect.Request[v1.DeleteImageFileRequest]) (*connect.Response[v1.DeleteImageFileResponse], error)
}

// NewImageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewImageServiceHandler(svc ImageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	imageServiceMethods := v1.File_pidx_image_v1_service_proto.Services().ByName("ImageService").Methods()
	imageServiceGetImageHandler := connect.NewUnaryHandler(
		ImageServiceGetImageProcedure,
		svc.GetImage,
		connect.WithSchema(imageServiceMethods.ByName("GetImage")),
		connect.WithHandlerOptions(opts...),
	)
	imageServiceDownloadImageHandler := connect.NewServerStreamHandler(
		ImageServiceDownloadImageProcedure,
		svc.DownloadImage,
		connect.WithSchema(imageServiceMethods.ByName("DownloadImage")),
		connect.WithHandlerOptions(opts...),
	)
	imageServiceDownloadImageFileHandler := connect.NewServerStreamHandler(
		ImageServiceDownloadImageFileProcedure,
		svc.DownloadImageFile,
		connect.WithSchema(imageServiceMethods.ByName("DownloadImageFile")),
		connect.WithHandlerOptions(opts...),
	)
	imageServiceUploadImageFileHandler := connect.NewClientStreamHandler(
		ImageServiceUploadImageFileProcedure,
		svc.UploadImageFile,
		connect.WithSchema(imageServiceMethods.ByName("UploadImageFile")),
		connect.WithHandlerOptions(opts...),
	)
	imageServiceDeleteImageHandler := connect.NewUnaryHandler(
		ImageServiceDeleteImageProcedure,
		svc.DeleteImage,
		connect.WithSchema(imageServiceMethods.ByName("DeleteImage")),
		connect.WithHandlerOptions(opts...),
	)
	imageServiceDeleteImageFileHandler := connect.NewUnaryHandler(
		ImageServiceDeleteImageFileProcedure,
		svc.DeleteImageFile,
		connect.WithSchema(imageServiceMethods.ByName("DeleteImageFile")),
		connect.WithHandlerOptions(opts...),
	)
	return "/pidx.image.v1.ImageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ImageServiceGetImageProcedure:
			imageServiceGetImageHandler.ServeHTTP(w, r)
		case ImageServiceDownloadImageProcedure:
			imageServiceDownloadImageHandler.ServeHTTP(w, r)
		case ImageServiceDownloadImageFileProcedure:
			imageServiceDownloadImageFileHandler.ServeHTTP(w, r)
		case ImageServiceUploadImageFileProcedure:
			imageServiceUploadImageFileHandler.ServeHTTP(w, r)
		case ImageServiceDeleteImageProcedure:
			imageServiceDeleteImageHandler.ServeHTTP(w, r)
		case ImageServiceDeleteImageFileProcedure:
			imageServiceDeleteImageFileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedImageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedImageServiceHandler struct{}

func (UnimplementedImageServiceHandler) GetImage(context.Context, *connect.Request[v1.GetImageRequest]) (*connect.Response[v1.GetImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pidx.image.v1.ImageService.GetImage is not implemented"))
}

func (UnimplementedImageServiceHandler) DownloadImage(context.Context, *connect.Request[v1.DownloadImageRequest], *connect.ServerStream[v1.DownloadImageResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("pidx.image.v1.ImageService.DownloadImage is not implemented"))
}

func (UnimplementedImageServiceHandler) DownloadImageFile(context.Context, *connect.Request[v1.DownloadImageFileRequest], *connect.ServerStream[v1.DownloadImageFileResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("pidx.image.v1.ImageService.DownloadImageFile is not implemented"))
}

func (UnimplementedImageServiceHandler) UploadImageFile(context.Context, *connect.ClientStream[v1.UploadImageFileRequest]) (*connect.Response[v1.UploadImageFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pidx.image.v1.ImageService.UploadImageFile is not implemented"))
}

func (UnimplementedImageServiceHandler) DeleteImage(context.Context, *connect.Request[v1.DeleteImageRequest]) (*connect.Response[v1.DeleteImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pidx.image.v1.ImageService.DeleteImage is not implemented"))
}

func (UnimplementedImageServiceHandler) DeleteImageFile(context.Context, *connect.Request[v1.DeleteImageFileRequest]) (*connect.Response[v1.DeleteImageFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pidx.image.v1.ImageService.DeleteImageFile is not implemented"))
}
