// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pidx/tag/v1/service.proto

package tagv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/lewdzifer/pidx/proto/generated/go/pidx/tag/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TagServiceName is the fully-qualified name of the TagService service.
	TagServiceName = "pidx.tag.v1.TagService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TagServiceCreateTagProcedure is the fully-qualified name of the TagService's CreateTag RPC.
	TagServiceCreateTagProcedure = "/pidx.tag.v1.TagService/CreateTag"
	// TagServiceGetTagProcedure is the fully-qualified name of the TagService's GetTag RPC.
	TagServiceGetTagProcedure = "/pidx.tag.v1.TagService/GetTag"
	// TagServiceUpdateTagProcedure is the fully-qualified name of the TagService's UpdateTag RPC.
	TagServiceUpdateTagProcedure = "/pidx.tag.v1.TagService/UpdateTag"
	// TagServiceGetTagAssignmentsProcedure is the fully-qualified name of the TagService's
	// GetTagAssignments RPC.
	TagServiceGetTagAssignmentsProcedure = "/pidx.tag.v1.TagService/GetTagAssignments"
	// TagServiceCreateTagAssignmentProcedure is the fully-qualified name of the TagService's
	// CreateTagAssignment RPC.
	TagServiceCreateTagAssignmentProcedure = "/pidx.tag.v1.TagService/CreateTagAssignment"
	// TagServiceDeleteTagAssignmentProcedure is the fully-qualified name of the TagService's
	// DeleteTagAssignment RPC.
	TagServiceDeleteTagAssignmentProcedure = "/pidx.tag.v1.TagService/DeleteTagAssignment"
)

// TagServiceClient is a client for the pidx.tag.v1.TagService service.
type TagServiceClient interface {
	// / Creates a new tag resource.
	// / The provided tag must not have an id set; the server will assign one.
	CreateTag(context.Context, *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.CreateTagResponse], error)
	// / Retrieves a tag resource by its unique id.
	// / Returns the tag if found, or a NOT_FOUND error if the tag does not exist.
	GetTag(context.Context, *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.GetTagResponse], error)
	// / Updates an existing tag resource.
	// / Only the fields specified in the update_mask will be updated; other fields will remain unchanged.
	// / Returns the updated tag.
	UpdateTag(context.Context, *connect.Request[v1.UpdateTagRequest]) (*connect.Response[v1.UpdateTagResponse], error)
	// / Retrieves all tag assignments for a given tag or entity.
	GetTagAssignments(context.Context, *connect.Request[v1.GetTagAssignmentsRequest]) (*connect.Response[v1.GetTagAssignmentsResponse], error)
	// / Creates one or more tag assignments, associating tags with entities.
	CreateTagAssignment(context.Context, *connect.Request[v1.CreateTagAssignmentRequest]) (*connect.Response[v1.CreateTagAssignmentResponse], error)
	// / Deletes a tag assignment by its unique id.
	DeleteTagAssignment(context.Context, *connect.Request[v1.DeleteTagAssignmentRequest]) (*connect.Response[v1.DeleteTagAssignmentResponse], error)
}

// NewTagServiceClient constructs a client for the pidx.tag.v1.TagService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTagServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TagServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tagServiceMethods := v1.File_pidx_tag_v1_service_proto.Services().ByName("TagService").Methods()
	return &tagServiceClient{
		createTag: connect.NewClient[v1.CreateTagRequest, v1.CreateTagResponse](
			httpClient,
			baseURL+TagServiceCreateTagProcedure,
			connect.WithSchema(tagServiceMethods.ByName("CreateTag")),
			connect.WithClientOptions(opts...),
		),
		getTag: connect.NewClient[v1.GetTagRequest, v1.GetTagResponse](
			httpClient,
			baseURL+TagServiceGetTagProcedure,
			connect.WithSchema(tagServiceMethods.ByName("GetTag")),
			connect.WithClientOptions(opts...),
		),
		updateTag: connect.NewClient[v1.UpdateTagRequest, v1.UpdateTagResponse](
			httpClient,
			baseURL+TagServiceUpdateTagProcedure,
			connect.WithSchema(tagServiceMethods.ByName("UpdateTag")),
			connect.WithClientOptions(opts...),
		),
		getTagAssignments: connect.NewClient[v1.GetTagAssignmentsRequest, v1.GetTagAssignmentsResponse](
			httpClient,
			baseURL+TagServiceGetTagAssignmentsProcedure,
			connect.WithSchema(tagServiceMethods.ByName("GetTagAssignments")),
			connect.WithClientOptions(opts...),
		),
		createTagAssignment: connect.NewClient[v1.CreateTagAssignmentRequest, v1.CreateTagAssignmentResponse](
			httpClient,
			baseURL+TagServiceCreateTagAssignmentProcedure,
			connect.WithSchema(tagServiceMethods.ByName("CreateTagAssignment")),
			connect.WithClientOptions(opts...),
		),
		deleteTagAssignment: connect.NewClient[v1.DeleteTagAssignmentRequest, v1.DeleteTagAssignmentResponse](
			httpClient,
			baseURL+TagServiceDeleteTagAssignmentProcedure,
			connect.WithSchema(tagServiceMethods.ByName("DeleteTagAssignment")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tagServiceClient implements TagServiceClient.
type tagServiceClient struct {
	createTag           *connect.Client[v1.CreateTagRequest, v1.CreateTagResponse]
	getTag              *connect.Client[v1.GetTagRequest, v1.GetTagResponse]
	updateTag           *connect.Client[v1.UpdateTagRequest, v1.UpdateTagResponse]
	getTagAssignments   *connect.Client[v1.GetTagAssignmentsRequest, v1.GetTagAssignmentsResponse]
	createTagAssignment *connect.Client[v1.CreateTagAssignmentRequest, v1.CreateTagAssignmentResponse]
	deleteTagAssignment *connect.Client[v1.DeleteTagAssignmentRequest, v1.DeleteTagAssignmentResponse]
}

// CreateTag calls pidx.tag.v1.TagService.CreateTag.
func (c *tagServiceClient) CreateTag(ctx context.Context, req *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.CreateTagResponse], error) {
	return c.createTag.CallUnary(ctx, req)
}

// GetTag calls pidx.tag.v1.TagService.GetTag.
func (c *tagServiceClient) GetTag(ctx context.Context, req *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.GetTagResponse], error) {
	return c.getTag.CallUnary(ctx, req)
}

// UpdateTag calls pidx.tag.v1.TagService.UpdateTag.
func (c *tagServiceClient) UpdateTag(ctx context.Context, req *connect.Request[v1.UpdateTagRequest]) (*connect.Response[v1.UpdateTagResponse], error) {
	return c.updateTag.CallUnary(ctx, req)
}

// GetTagAssignments calls pidx.tag.v1.TagService.GetTagAssignments.
func (c *tagServiceClient) GetTagAssignments(ctx context.Context, req *connect.Request[v1.GetTagAssignmentsRequest]) (*connect.Response[v1.GetTagAssignmentsResponse], error) {
	return c.getTagAssignments.CallUnary(ctx, req)
}

// CreateTagAssignment calls pidx.tag.v1.TagService.CreateTagAssignment.
func (c *tagServiceClient) CreateTagAssignment(ctx context.Context, req *connect.Request[v1.CreateTagAssignmentRequest]) (*connect.Response[v1.CreateTagAssignmentResponse], error) {
	return c.createTagAssignment.CallUnary(ctx, req)
}

// DeleteTagAssignment calls pidx.tag.v1.TagService.DeleteTagAssignment.
func (c *tagServiceClient) DeleteTagAssignment(ctx context.Context, req *connect.Request[v1.DeleteTagAssignmentRequest]) (*connect.Response[v1.DeleteTagAssignmentResponse], error) {
	return c.deleteTagAssignment.CallUnary(ctx, req)
}

// TagServiceHandler is an implementation of the pidx.tag.v1.TagService service.
type TagServiceHandler interface {
	// / Creates a new tag resource.
	// / The provided tag must not have an id set; the server will assign one.
	CreateTag(context.Context, *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.CreateTagResponse], error)
	// / Retrieves a tag resource by its unique id.
	// / Returns the tag if found, or a NOT_FOUND error if the tag does not exist.
	GetTag(context.Context, *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.GetTagResponse], error)
	// / Updates an existing tag resource.
	// / Only the fields specified in the update_mask will be updated; other fields will remain unchanged.
	// / Returns the updated tag.
	UpdateTag(context.Context, *connect.Request[v1.UpdateTagRequest]) (*connect.Response[v1.UpdateTagResponse], error)
	// / Retrieves all tag assignments for a given tag or entity.
	GetTagAssignments(context.Context, *connect.Request[v1.GetTagAssignmentsRequest]) (*connect.Response[v1.GetTagAssignmentsResponse], error)
	// / Creates one or more tag assignments, associating tags with entities.
	CreateTagAssignment(context.Context, *connect.Request[v1.CreateTagAssignmentRequest]) (*connect.Response[v1.CreateTagAssignmentResponse], error)
	// / Deletes a tag assignment by its unique id.
	DeleteTagAssignment(context.Context, *connect.Request[v1.DeleteTagAssignmentRequest]) (*connect.Response[v1.DeleteTagAssignmentResponse], error)
}

// NewTagServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTagServiceHandler(svc TagServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tagServiceMethods := v1.File_pidx_tag_v1_service_proto.Services().ByName("TagService").Methods()
	tagServiceCreateTagHandler := connect.NewUnaryHandler(
		TagServiceCreateTagProcedure,
		svc.CreateTag,
		connect.WithSchema(tagServiceMethods.ByName("CreateTag")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceGetTagHandler := connect.NewUnaryHandler(
		TagServiceGetTagProcedure,
		svc.GetTag,
		connect.WithSchema(tagServiceMethods.ByName("GetTag")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceUpdateTagHandler := connect.NewUnaryHandler(
		TagServiceUpdateTagProcedure,
		svc.UpdateTag,
		connect.WithSchema(tagServiceMethods.ByName("UpdateTag")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceGetTagAssignmentsHandler := connect.NewUnaryHandler(
		TagServiceGetTagAssignmentsProcedure,
		svc.GetTagAssignments,
		connect.WithSchema(tagServiceMethods.ByName("GetTagAssignments")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceCreateTagAssignmentHandler := connect.NewUnaryHandler(
		TagServiceCreateTagAssignmentProcedure,
		svc.CreateTagAssignment,
		connect.WithSchema(tagServiceMethods.ByName("CreateTagAssignment")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceDeleteTagAssignmentHandler := connect.NewUnaryHandler(
		TagServiceDeleteTagAssignmentProcedure,
		svc.DeleteTagAssignment,
		connect.WithSchema(tagServiceMethods.ByName("DeleteTagAssignment")),
		connect.WithHandlerOptions(opts...),
	)
	return "/pidx.tag.v1.TagService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TagServiceCreateTagProcedure:
			tagServiceCreateTagHandler.ServeHTTP(w, r)
		case TagServiceGetTagProcedure:
			tagServiceGetTagHandler.ServeHTTP(w, r)
		case TagServiceUpdateTagProcedure:
			tagServiceUpdateTagHandler.ServeHTTP(w, r)
		case TagServiceGetTagAssignmentsProcedure:
			tagServiceGetTagAssignmentsHandler.ServeHTTP(w, r)
		case TagServiceCreateTagAssignmentProcedure:
			tagServiceCreateTagAssignmentHandler.ServeHTTP(w, r)
		case TagServiceDeleteTagAssignmentProcedure:
			tagServiceDeleteTagAssignmentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTagServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTagServiceHandler struct{}

func (UnimplementedTagServiceHandler) CreateTag(context.Context, *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.CreateTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pidx.tag.v1.TagService.CreateTag is not implemented"))
}

func (UnimplementedTagServiceHandler) GetTag(context.Context, *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.GetTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pidx.tag.v1.TagService.GetTag is not implemented"))
}

func (UnimplementedTagServiceHandler) UpdateTag(context.Context, *connect.Request[v1.UpdateTagRequest]) (*connect.Response[v1.UpdateTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pidx.tag.v1.TagService.UpdateTag is not implemented"))
}

func (UnimplementedTagServiceHandler) GetTagAssignments(context.Context, *connect.Request[v1.GetTagAssignmentsRequest]) (*connect.Response[v1.GetTagAssignmentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pidx.tag.v1.TagService.GetTagAssignments is not implemented"))
}

func (UnimplementedTagServiceHandler) CreateTagAssignment(context.Context, *connect.Request[v1.CreateTagAssignmentRequest]) (*connect.Response[v1.CreateTagAssignmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pidx.tag.v1.TagService.CreateTagAssignment is not implemented"))
}

func (UnimplementedTagServiceHandler) DeleteTagAssignment(context.Context, *connect.Request[v1.DeleteTagAssignmentRequest]) (*connect.Response[v1.DeleteTagAssignmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pidx.tag.v1.TagService.DeleteTagAssignment is not implemented"))
}
