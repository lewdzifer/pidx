// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pidx/blob/v1/blob.proto

package blobv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Blob represents information about a blob, i.e. a binary object of any kind.
// It contains metadata such as a unique identifier, size, media type, and cryptographic hashes.
// Blobs are used to store and reference binary data, such as files, images, or other media.
type Blob struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier for the blob.
	// This must be a non-empty string and is typically assigned by the server.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The size of the blob in bytes.
	// This value represents the total number of bytes in the blob's content.
	SizeBytes uint64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// The media (MIME) type of the blob.
	// This describes the format of the blob's content (e.g., "image/png", "application/pdf").
	MediaType string `protobuf:"bytes,3,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	// The cryptographic hashes of the blob.
	// These hashes can be used for integrity verification, deduplication, and fast identification.
	Hashes        *Hashes `protobuf:"bytes,4,opt,name=hashes,proto3" json:"hashes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Blob) Reset() {
	*x = Blob{}
	mi := &file_pidx_blob_v1_blob_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Blob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blob) ProtoMessage() {}

func (x *Blob) ProtoReflect() protoreflect.Message {
	mi := &file_pidx_blob_v1_blob_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blob.ProtoReflect.Descriptor instead.
func (*Blob) Descriptor() ([]byte, []int) {
	return file_pidx_blob_v1_blob_proto_rawDescGZIP(), []int{0}
}

func (x *Blob) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Blob) GetSizeBytes() uint64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *Blob) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *Blob) GetHashes() *Hashes {
	if x != nil {
		return x.Hashes
	}
	return nil
}

var File_pidx_blob_v1_blob_proto protoreflect.FileDescriptor

const file_pidx_blob_v1_blob_proto_rawDesc = "" +
	"\n" +
	"\x17pidx/blob/v1/blob.proto\x12\fpidx.blob.v1\x1a\x1bbuf/validate/validate.proto\x1a\x19pidx/blob/v1/hashes.proto\"\x8b\x01\n" +
	"\x04Blob\x12\x17\n" +
	"\x02id\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x02id\x12\x1d\n" +
	"\n" +
	"size_bytes\x18\x02 \x01(\x04R\tsizeBytes\x12\x1d\n" +
	"\n" +
	"media_type\x18\x03 \x01(\tR\tmediaType\x12,\n" +
	"\x06hashes\x18\x04 \x01(\v2\x14.pidx.blob.v1.HashesR\x06hashesB\xb1\x01\n" +
	"\x10com.pidx.blob.v1B\tBlobProtoP\x01Z@github.com/lewdzifer/pidx/proto/generated/go/pidx/blob/v1;blobv1\xa2\x02\x03PBX\xaa\x02\fPidx.Blob.V1\xca\x02\fPidx\\Blob\\V1\xe2\x02\x18Pidx\\Blob\\V1\\GPBMetadata\xea\x02\x0ePidx::Blob::V1b\x06proto3"

var (
	file_pidx_blob_v1_blob_proto_rawDescOnce sync.Once
	file_pidx_blob_v1_blob_proto_rawDescData []byte
)

func file_pidx_blob_v1_blob_proto_rawDescGZIP() []byte {
	file_pidx_blob_v1_blob_proto_rawDescOnce.Do(func() {
		file_pidx_blob_v1_blob_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pidx_blob_v1_blob_proto_rawDesc), len(file_pidx_blob_v1_blob_proto_rawDesc)))
	})
	return file_pidx_blob_v1_blob_proto_rawDescData
}

var file_pidx_blob_v1_blob_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pidx_blob_v1_blob_proto_goTypes = []any{
	(*Blob)(nil),   // 0: pidx.blob.v1.Blob
	(*Hashes)(nil), // 1: pidx.blob.v1.Hashes
}
var file_pidx_blob_v1_blob_proto_depIdxs = []int32{
	1, // 0: pidx.blob.v1.Blob.hashes:type_name -> pidx.blob.v1.Hashes
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_pidx_blob_v1_blob_proto_init() }
func file_pidx_blob_v1_blob_proto_init() {
	if File_pidx_blob_v1_blob_proto != nil {
		return
	}
	file_pidx_blob_v1_hashes_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pidx_blob_v1_blob_proto_rawDesc), len(file_pidx_blob_v1_blob_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pidx_blob_v1_blob_proto_goTypes,
		DependencyIndexes: file_pidx_blob_v1_blob_proto_depIdxs,
		MessageInfos:      file_pidx_blob_v1_blob_proto_msgTypes,
	}.Build()
	File_pidx_blob_v1_blob_proto = out.File
	file_pidx_blob_v1_blob_proto_goTypes = nil
	file_pidx_blob_v1_blob_proto_depIdxs = nil
}
