// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pidx/blob/v1/source.proto

package blobv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Source represents the origin or provenance of a blob.
// It describes where the blob's data was originally obtained from.
// This message is used to track the source of a blob for purposes such as auditing, deduplication, or attribution.
type Source struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier for the source.
	// This must be a non-empty string and is typically assigned by the server.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of source for the blob.
	//
	// Types that are valid to be assigned to Type:
	//
	//	*Source_Uri
	//	*Source_LocalFile
	//	*Source_Torrent
	Type          isSource_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Source) Reset() {
	*x = Source{}
	mi := &file_pidx_blob_v1_source_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_pidx_blob_v1_source_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_pidx_blob_v1_source_proto_rawDescGZIP(), []int{0}
}

func (x *Source) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Source) GetType() isSource_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Source) GetUri() *UriSource {
	if x != nil {
		if x, ok := x.Type.(*Source_Uri); ok {
			return x.Uri
		}
	}
	return nil
}

func (x *Source) GetLocalFile() *LocalFileSource {
	if x != nil {
		if x, ok := x.Type.(*Source_LocalFile); ok {
			return x.LocalFile
		}
	}
	return nil
}

func (x *Source) GetTorrent() *TorrentSource {
	if x != nil {
		if x, ok := x.Type.(*Source_Torrent); ok {
			return x.Torrent
		}
	}
	return nil
}

type isSource_Type interface {
	isSource_Type()
}

type Source_Uri struct {
	// The blob was sourced from a URI (Uniform Resource Identifier), such as HTTP, FTP, S3, etc.
	// This is used when the blob was downloaded or retrieved from a network location.
	Uri *UriSource `protobuf:"bytes,2,opt,name=uri,proto3,oneof"`
}

type Source_LocalFile struct {
	// The blob was sourced from a local file on a specific host or machine.
	// This is used when the blob originated from a file system, either local or remote.
	LocalFile *LocalFileSource `protobuf:"bytes,3,opt,name=local_file,json=localFile,proto3,oneof"`
}

type Source_Torrent struct {
	// The blob was sourced from a file contained within a torrent.
	// This is used when the blob was extracted from a BitTorrent resource.
	Torrent *TorrentSource `protobuf:"bytes,4,opt,name=torrent,proto3,oneof"`
}

func (*Source_Uri) isSource_Type() {}

func (*Source_LocalFile) isSource_Type() {}

func (*Source_Torrent) isSource_Type() {}

// UriSource describes a blob that originated from a URI.
type UriSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The URI from which the blob was obtained (e.g., "https://example.com/file.jpg").
	// This should be a valid URI pointing to the original location of the blob.
	Uri           string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UriSource) Reset() {
	*x = UriSource{}
	mi := &file_pidx_blob_v1_source_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UriSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UriSource) ProtoMessage() {}

func (x *UriSource) ProtoReflect() protoreflect.Message {
	mi := &file_pidx_blob_v1_source_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UriSource.ProtoReflect.Descriptor instead.
func (*UriSource) Descriptor() ([]byte, []int) {
	return file_pidx_blob_v1_source_proto_rawDescGZIP(), []int{1}
}

func (x *UriSource) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// LocalFileSource describes a blob that originated from a file on a local or remote host.
type LocalFileSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hostname or network identifier of the machine where the file was located.
	// This can be a DNS name, IP address, or other unique identifier for the host.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The absolute or relative path to the file on the specified host.
	// This should specify the location of the file within the host's file system.
	Path          string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalFileSource) Reset() {
	*x = LocalFileSource{}
	mi := &file_pidx_blob_v1_source_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalFileSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalFileSource) ProtoMessage() {}

func (x *LocalFileSource) ProtoReflect() protoreflect.Message {
	mi := &file_pidx_blob_v1_source_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalFileSource.ProtoReflect.Descriptor instead.
func (*LocalFileSource) Descriptor() ([]byte, []int) {
	return file_pidx_blob_v1_source_proto_rawDescGZIP(), []int{2}
}

func (x *LocalFileSource) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *LocalFileSource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// TorrentSource describes a blob that originated from a torrent.
// This includes the torrent's info hash and the specific file name within the torrent.
type TorrentSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The info hash of the torrent, which uniquely identifies the torrent.
	// For BitTorrent v1, this is a 20-byte SHA-1 hash.
	// For BitTorrent v2, this is a 32-byte SHA-256 hash (up to 64 bytes for hybrid torrents).
	TorrentHash []byte `protobuf:"bytes,1,opt,name=torrent_hash,json=torrentHash,proto3" json:"torrent_hash,omitempty"`
	// The file name within the torrent that was used to create the blob.
	// This should match the name of the file as listed in the torrent's file list.
	FileName      string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TorrentSource) Reset() {
	*x = TorrentSource{}
	mi := &file_pidx_blob_v1_source_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TorrentSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TorrentSource) ProtoMessage() {}

func (x *TorrentSource) ProtoReflect() protoreflect.Message {
	mi := &file_pidx_blob_v1_source_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TorrentSource.ProtoReflect.Descriptor instead.
func (*TorrentSource) Descriptor() ([]byte, []int) {
	return file_pidx_blob_v1_source_proto_rawDescGZIP(), []int{3}
}

func (x *TorrentSource) GetTorrentHash() []byte {
	if x != nil {
		return x.TorrentHash
	}
	return nil
}

func (x *TorrentSource) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

var File_pidx_blob_v1_source_proto protoreflect.FileDescriptor

const file_pidx_blob_v1_source_proto_rawDesc = "" +
	"\n" +
	"\x19pidx/blob/v1/source.proto\x12\fpidx.blob.v1\x1a\x1bbuf/validate/validate.proto\"\xcf\x01\n" +
	"\x06Source\x12\x17\n" +
	"\x02id\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x02id\x12+\n" +
	"\x03uri\x18\x02 \x01(\v2\x17.pidx.blob.v1.UriSourceH\x00R\x03uri\x12>\n" +
	"\n" +
	"local_file\x18\x03 \x01(\v2\x1d.pidx.blob.v1.LocalFileSourceH\x00R\tlocalFile\x127\n" +
	"\atorrent\x18\x04 \x01(\v2\x1b.pidx.blob.v1.TorrentSourceH\x00R\atorrentB\x06\n" +
	"\x04type\"'\n" +
	"\tUriSource\x12\x1a\n" +
	"\x03uri\x18\x01 \x01(\tB\b\xbaH\x05r\x03\x88\x01\x01R\x03uri\"S\n" +
	"\x0fLocalFileSource\x12#\n" +
	"\bhostname\x18\x01 \x01(\tB\a\xbaH\x04r\x02h\x01R\bhostname\x12\x1b\n" +
	"\x04path\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04path\"c\n" +
	"\rTorrentSource\x12,\n" +
	"\ftorrent_hash\x18\x01 \x01(\fB\t\xbaH\x06z\x04\x10\x14\x18@R\vtorrentHash\x12$\n" +
	"\tfile_name\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\bfileNameB\xb3\x01\n" +
	"\x10com.pidx.blob.v1B\vSourceProtoP\x01Z@github.com/lewdzifer/pidx/proto/generated/go/pidx/blob/v1;blobv1\xa2\x02\x03PBX\xaa\x02\fPidx.Blob.V1\xca\x02\fPidx\\Blob\\V1\xe2\x02\x18Pidx\\Blob\\V1\\GPBMetadata\xea\x02\x0ePidx::Blob::V1b\x06proto3"

var (
	file_pidx_blob_v1_source_proto_rawDescOnce sync.Once
	file_pidx_blob_v1_source_proto_rawDescData []byte
)

func file_pidx_blob_v1_source_proto_rawDescGZIP() []byte {
	file_pidx_blob_v1_source_proto_rawDescOnce.Do(func() {
		file_pidx_blob_v1_source_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pidx_blob_v1_source_proto_rawDesc), len(file_pidx_blob_v1_source_proto_rawDesc)))
	})
	return file_pidx_blob_v1_source_proto_rawDescData
}

var file_pidx_blob_v1_source_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pidx_blob_v1_source_proto_goTypes = []any{
	(*Source)(nil),          // 0: pidx.blob.v1.Source
	(*UriSource)(nil),       // 1: pidx.blob.v1.UriSource
	(*LocalFileSource)(nil), // 2: pidx.blob.v1.LocalFileSource
	(*TorrentSource)(nil),   // 3: pidx.blob.v1.TorrentSource
}
var file_pidx_blob_v1_source_proto_depIdxs = []int32{
	1, // 0: pidx.blob.v1.Source.uri:type_name -> pidx.blob.v1.UriSource
	2, // 1: pidx.blob.v1.Source.local_file:type_name -> pidx.blob.v1.LocalFileSource
	3, // 2: pidx.blob.v1.Source.torrent:type_name -> pidx.blob.v1.TorrentSource
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_pidx_blob_v1_source_proto_init() }
func file_pidx_blob_v1_source_proto_init() {
	if File_pidx_blob_v1_source_proto != nil {
		return
	}
	file_pidx_blob_v1_source_proto_msgTypes[0].OneofWrappers = []any{
		(*Source_Uri)(nil),
		(*Source_LocalFile)(nil),
		(*Source_Torrent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pidx_blob_v1_source_proto_rawDesc), len(file_pidx_blob_v1_source_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pidx_blob_v1_source_proto_goTypes,
		DependencyIndexes: file_pidx_blob_v1_source_proto_depIdxs,
		MessageInfos:      file_pidx_blob_v1_source_proto_msgTypes,
	}.Build()
	File_pidx_blob_v1_source_proto = out.File
	file_pidx_blob_v1_source_proto_goTypes = nil
	file_pidx_blob_v1_source_proto_depIdxs = nil
}
