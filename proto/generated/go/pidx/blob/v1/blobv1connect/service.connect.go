// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pidx/blob/v1/service.proto

package blobv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/lewdzifer/pidx/proto/generated/go/pidx/blob/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BlobServiceName is the fully-qualified name of the BlobService service.
	BlobServiceName = "pidx.blob.v1.BlobService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BlobServiceGetBlobProcedure is the fully-qualified name of the BlobService's GetBlob RPC.
	BlobServiceGetBlobProcedure = "/pidx.blob.v1.BlobService/GetBlob"
	// BlobServiceDownloadBlobProcedure is the fully-qualified name of the BlobService's DownloadBlob
	// RPC.
	BlobServiceDownloadBlobProcedure = "/pidx.blob.v1.BlobService/DownloadBlob"
	// BlobServiceUploadBlobProcedure is the fully-qualified name of the BlobService's UploadBlob RPC.
	BlobServiceUploadBlobProcedure = "/pidx.blob.v1.BlobService/UploadBlob"
	// BlobServiceDeleteBlobDataProcedure is the fully-qualified name of the BlobService's
	// DeleteBlobData RPC.
	BlobServiceDeleteBlobDataProcedure = "/pidx.blob.v1.BlobService/DeleteBlobData"
	// BlobServiceDeleteBlobProcedure is the fully-qualified name of the BlobService's DeleteBlob RPC.
	BlobServiceDeleteBlobProcedure = "/pidx.blob.v1.BlobService/DeleteBlob"
	// BlobServiceAddSourceProcedure is the fully-qualified name of the BlobService's AddSource RPC.
	BlobServiceAddSourceProcedure = "/pidx.blob.v1.BlobService/AddSource"
	// BlobServiceRemoveSourceProcedure is the fully-qualified name of the BlobService's RemoveSource
	// RPC.
	BlobServiceRemoveSourceProcedure = "/pidx.blob.v1.BlobService/RemoveSource"
)

// BlobServiceClient is a client for the pidx.blob.v1.BlobService service.
type BlobServiceClient interface {
	// GetBlob retrieves metadata for a blob by its unique identifier.
	GetBlob(context.Context, *connect.Request[v1.GetBlobRequest]) (*connect.Response[v1.GetBlobResponse], error)
	// DownloadBlob streams the binary content of a blob in chunks.
	DownloadBlob(context.Context, *connect.Request[v1.DownloadBlobRequest]) (*connect.ServerStreamForClient[v1.DownloadBlobResponse], error)
	// UploadBlob uploads a blob by streaming its binary content in chunks.
	UploadBlob(context.Context) *connect.ClientStreamForClient[v1.UploadBlobRequest, v1.UploadBlobResponse]
	// DeleteBlobData deletes the binary data of a blob. This does not delete the blob's metadata.
	DeleteBlobData(context.Context, *connect.Request[v1.DeleteBlobDataRequest]) (*connect.Response[v1.DeleteBlobDataResponse], error)
	// DeleteBlob deletes the binary data and metadata of a blob.
	DeleteBlob(context.Context, *connect.Request[v1.DeleteBlobRequest]) (*connect.Response[v1.DeleteBlobResponse], error)
	// AddSource associates a new source with an existing blob.
	AddSource(context.Context, *connect.Request[v1.AddSourceRequest]) (*connect.Response[v1.AddSourceResponse], error)
	// RemoveSource disassociates a source from a blob.
	RemoveSource(context.Context, *connect.Request[v1.RemoveSourceRequest]) (*connect.Response[v1.RemoveSourceResponse], error)
}

// NewBlobServiceClient constructs a client for the pidx.blob.v1.BlobService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBlobServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BlobServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	blobServiceMethods := v1.File_pidx_blob_v1_service_proto.Services().ByName("BlobService").Methods()
	return &blobServiceClient{
		getBlob: connect.NewClient[v1.GetBlobRequest, v1.GetBlobResponse](
			httpClient,
			baseURL+BlobServiceGetBlobProcedure,
			connect.WithSchema(blobServiceMethods.ByName("GetBlob")),
			connect.WithClientOptions(opts...),
		),
		downloadBlob: connect.NewClient[v1.DownloadBlobRequest, v1.DownloadBlobResponse](
			httpClient,
			baseURL+BlobServiceDownloadBlobProcedure,
			connect.WithSchema(blobServiceMethods.ByName("DownloadBlob")),
			connect.WithClientOptions(opts...),
		),
		uploadBlob: connect.NewClient[v1.UploadBlobRequest, v1.UploadBlobResponse](
			httpClient,
			baseURL+BlobServiceUploadBlobProcedure,
			connect.WithSchema(blobServiceMethods.ByName("UploadBlob")),
			connect.WithClientOptions(opts...),
		),
		deleteBlobData: connect.NewClient[v1.DeleteBlobDataRequest, v1.DeleteBlobDataResponse](
			httpClient,
			baseURL+BlobServiceDeleteBlobDataProcedure,
			connect.WithSchema(blobServiceMethods.ByName("DeleteBlobData")),
			connect.WithClientOptions(opts...),
		),
		deleteBlob: connect.NewClient[v1.DeleteBlobRequest, v1.DeleteBlobResponse](
			httpClient,
			baseURL+BlobServiceDeleteBlobProcedure,
			connect.WithSchema(blobServiceMethods.ByName("DeleteBlob")),
			connect.WithClientOptions(opts...),
		),
		addSource: connect.NewClient[v1.AddSourceRequest, v1.AddSourceResponse](
			httpClient,
			baseURL+BlobServiceAddSourceProcedure,
			connect.WithSchema(blobServiceMethods.ByName("AddSource")),
			connect.WithClientOptions(opts...),
		),
		removeSource: connect.NewClient[v1.RemoveSourceRequest, v1.RemoveSourceResponse](
			httpClient,
			baseURL+BlobServiceRemoveSourceProcedure,
			connect.WithSchema(blobServiceMethods.ByName("RemoveSource")),
			connect.WithClientOptions(opts...),
		),
	}
}

// blobServiceClient implements BlobServiceClient.
type blobServiceClient struct {
	getBlob        *connect.Client[v1.GetBlobRequest, v1.GetBlobResponse]
	downloadBlob   *connect.Client[v1.DownloadBlobRequest, v1.DownloadBlobResponse]
	uploadBlob     *connect.Client[v1.UploadBlobRequest, v1.UploadBlobResponse]
	deleteBlobData *connect.Client[v1.DeleteBlobDataRequest, v1.DeleteBlobDataResponse]
	deleteBlob     *connect.Client[v1.DeleteBlobRequest, v1.DeleteBlobResponse]
	addSource      *connect.Client[v1.AddSourceRequest, v1.AddSourceResponse]
	removeSource   *connect.Client[v1.RemoveSourceRequest, v1.RemoveSourceResponse]
}

// GetBlob calls pidx.blob.v1.BlobService.GetBlob.
func (c *blobServiceClient) GetBlob(ctx context.Context, req *connect.Request[v1.GetBlobRequest]) (*connect.Response[v1.GetBlobResponse], error) {
	return c.getBlob.CallUnary(ctx, req)
}

// DownloadBlob calls pidx.blob.v1.BlobService.DownloadBlob.
func (c *blobServiceClient) DownloadBlob(ctx context.Context, req *connect.Request[v1.DownloadBlobRequest]) (*connect.ServerStreamForClient[v1.DownloadBlobResponse], error) {
	return c.downloadBlob.CallServerStream(ctx, req)
}

// UploadBlob calls pidx.blob.v1.BlobService.UploadBlob.
func (c *blobServiceClient) UploadBlob(ctx context.Context) *connect.ClientStreamForClient[v1.UploadBlobRequest, v1.UploadBlobResponse] {
	return c.uploadBlob.CallClientStream(ctx)
}

// DeleteBlobData calls pidx.blob.v1.BlobService.DeleteBlobData.
func (c *blobServiceClient) DeleteBlobData(ctx context.Context, req *connect.Request[v1.DeleteBlobDataRequest]) (*connect.Response[v1.DeleteBlobDataResponse], error) {
	return c.deleteBlobData.CallUnary(ctx, req)
}

// DeleteBlob calls pidx.blob.v1.BlobService.DeleteBlob.
func (c *blobServiceClient) DeleteBlob(ctx context.Context, req *connect.Request[v1.DeleteBlobRequest]) (*connect.Response[v1.DeleteBlobResponse], error) {
	return c.deleteBlob.CallUnary(ctx, req)
}

// AddSource calls pidx.blob.v1.BlobService.AddSource.
func (c *blobServiceClient) AddSource(ctx context.Context, req *connect.Request[v1.AddSourceRequest]) (*connect.Response[v1.AddSourceResponse], error) {
	return c.addSource.CallUnary(ctx, req)
}

// RemoveSource calls pidx.blob.v1.BlobService.RemoveSource.
func (c *blobServiceClient) RemoveSource(ctx context.Context, req *connect.Request[v1.RemoveSourceRequest]) (*connect.Response[v1.RemoveSourceResponse], error) {
	return c.removeSource.CallUnary(ctx, req)
}

// BlobServiceHandler is an implementation of the pidx.blob.v1.BlobService service.
type BlobServiceHandler interface {
	// GetBlob retrieves metadata for a blob by its unique identifier.
	GetBlob(context.Context, *connect.Request[v1.GetBlobRequest]) (*connect.Response[v1.GetBlobResponse], error)
	// DownloadBlob streams the binary content of a blob in chunks.
	DownloadBlob(context.Context, *connect.Request[v1.DownloadBlobRequest], *connect.ServerStream[v1.DownloadBlobResponse]) error
	// UploadBlob uploads a blob by streaming its binary content in chunks.
	UploadBlob(context.Context, *connect.ClientStream[v1.UploadBlobRequest]) (*connect.Response[v1.UploadBlobResponse], error)
	// DeleteBlobData deletes the binary data of a blob. This does not delete the blob's metadata.
	DeleteBlobData(context.Context, *connect.Request[v1.DeleteBlobDataRequest]) (*connect.Response[v1.DeleteBlobDataResponse], error)
	// DeleteBlob deletes the binary data and metadata of a blob.
	DeleteBlob(context.Context, *connect.Request[v1.DeleteBlobRequest]) (*connect.Response[v1.DeleteBlobResponse], error)
	// AddSource associates a new source with an existing blob.
	AddSource(context.Context, *connect.Request[v1.AddSourceRequest]) (*connect.Response[v1.AddSourceResponse], error)
	// RemoveSource disassociates a source from a blob.
	RemoveSource(context.Context, *connect.Request[v1.RemoveSourceRequest]) (*connect.Response[v1.RemoveSourceResponse], error)
}

// NewBlobServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBlobServiceHandler(svc BlobServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	blobServiceMethods := v1.File_pidx_blob_v1_service_proto.Services().ByName("BlobService").Methods()
	blobServiceGetBlobHandler := connect.NewUnaryHandler(
		BlobServiceGetBlobProcedure,
		svc.GetBlob,
		connect.WithSchema(blobServiceMethods.ByName("GetBlob")),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceDownloadBlobHandler := connect.NewServerStreamHandler(
		BlobServiceDownloadBlobProcedure,
		svc.DownloadBlob,
		connect.WithSchema(blobServiceMethods.ByName("DownloadBlob")),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceUploadBlobHandler := connect.NewClientStreamHandler(
		BlobServiceUploadBlobProcedure,
		svc.UploadBlob,
		connect.WithSchema(blobServiceMethods.ByName("UploadBlob")),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceDeleteBlobDataHandler := connect.NewUnaryHandler(
		BlobServiceDeleteBlobDataProcedure,
		svc.DeleteBlobData,
		connect.WithSchema(blobServiceMethods.ByName("DeleteBlobData")),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceDeleteBlobHandler := connect.NewUnaryHandler(
		BlobServiceDeleteBlobProcedure,
		svc.DeleteBlob,
		connect.WithSchema(blobServiceMethods.ByName("DeleteBlob")),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceAddSourceHandler := connect.NewUnaryHandler(
		BlobServiceAddSourceProcedure,
		svc.AddSource,
		connect.WithSchema(blobServiceMethods.ByName("AddSource")),
		connect.WithHandlerOptions(opts...),
	)
	blobServiceRemoveSourceHandler := connect.NewUnaryHandler(
		BlobServiceRemoveSourceProcedure,
		svc.RemoveSource,
		connect.WithSchema(blobServiceMethods.ByName("RemoveSource")),
		connect.WithHandlerOptions(opts...),
	)
	return "/pidx.blob.v1.BlobService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BlobServiceGetBlobProcedure:
			blobServiceGetBlobHandler.ServeHTTP(w, r)
		case BlobServiceDownloadBlobProcedure:
			blobServiceDownloadBlobHandler.ServeHTTP(w, r)
		case BlobServiceUploadBlobProcedure:
			blobServiceUploadBlobHandler.ServeHTTP(w, r)
		case BlobServiceDeleteBlobDataProcedure:
			blobServiceDeleteBlobDataHandler.ServeHTTP(w, r)
		case BlobServiceDeleteBlobProcedure:
			blobServiceDeleteBlobHandler.ServeHTTP(w, r)
		case BlobServiceAddSourceProcedure:
			blobServiceAddSourceHandler.ServeHTTP(w, r)
		case BlobServiceRemoveSourceProcedure:
			blobServiceRemoveSourceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBlobServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBlobServiceHandler struct{}

func (UnimplementedBlobServiceHandler) GetBlob(context.Context, *connect.Request[v1.GetBlobRequest]) (*connect.Response[v1.GetBlobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pidx.blob.v1.BlobService.GetBlob is not implemented"))
}

func (UnimplementedBlobServiceHandler) DownloadBlob(context.Context, *connect.Request[v1.DownloadBlobRequest], *connect.ServerStream[v1.DownloadBlobResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("pidx.blob.v1.BlobService.DownloadBlob is not implemented"))
}

func (UnimplementedBlobServiceHandler) UploadBlob(context.Context, *connect.ClientStream[v1.UploadBlobRequest]) (*connect.Response[v1.UploadBlobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pidx.blob.v1.BlobService.UploadBlob is not implemented"))
}

func (UnimplementedBlobServiceHandler) DeleteBlobData(context.Context, *connect.Request[v1.DeleteBlobDataRequest]) (*connect.Response[v1.DeleteBlobDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pidx.blob.v1.BlobService.DeleteBlobData is not implemented"))
}

func (UnimplementedBlobServiceHandler) DeleteBlob(context.Context, *connect.Request[v1.DeleteBlobRequest]) (*connect.Response[v1.DeleteBlobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pidx.blob.v1.BlobService.DeleteBlob is not implemented"))
}

func (UnimplementedBlobServiceHandler) AddSource(context.Context, *connect.Request[v1.AddSourceRequest]) (*connect.Response[v1.AddSourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pidx.blob.v1.BlobService.AddSource is not implemented"))
}

func (UnimplementedBlobServiceHandler) RemoveSource(context.Context, *connect.Request[v1.RemoveSourceRequest]) (*connect.Response[v1.RemoveSourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pidx.blob.v1.BlobService.RemoveSource is not implemented"))
}
