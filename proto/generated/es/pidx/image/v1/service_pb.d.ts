// @generated by protoc-gen-es v2.2.5
// @generated from file pidx/image/v1/service.proto (package pidx.image.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Image } from "./image_pb";
import type { File } from "./file_pb";
import type { Source } from "../../blob/v1/source_pb";

/**
 * Describes the file pidx/image/v1/service.proto.
 */
export declare const file_pidx_image_v1_service: GenFile;

/**
 * GetImageRequest is the request message for retrieving an image's metadata.
 *
 * @generated from message pidx.image.v1.GetImageRequest
 */
export declare type GetImageRequest = Message<"pidx.image.v1.GetImageRequest"> & {
  /**
   * The unique identifier of the image to retrieve.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message pidx.image.v1.GetImageRequest.
 * Use `create(GetImageRequestSchema)` to create a new message.
 */
export declare const GetImageRequestSchema: GenMessage<GetImageRequest>;

/**
 * GetImageResponse is the response message containing the image's metadata.
 *
 * @generated from message pidx.image.v1.GetImageResponse
 */
export declare type GetImageResponse = Message<"pidx.image.v1.GetImageResponse"> & {
  /**
   * The metadata of the requested image.
   *
   * @generated from field: pidx.image.v1.Image image = 1;
   */
  image?: Image;
};

/**
 * Describes the message pidx.image.v1.GetImageResponse.
 * Use `create(GetImageResponseSchema)` to create a new message.
 */
export declare const GetImageResponseSchema: GenMessage<GetImageResponse>;

/**
 * DownloadImageRequest is the request message for downloading an image's content.
 *
 * @generated from message pidx.image.v1.DownloadImageRequest
 */
export declare type DownloadImageRequest = Message<"pidx.image.v1.DownloadImageRequest"> & {
  /**
   * The unique identifier of the image to download.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message pidx.image.v1.DownloadImageRequest.
 * Use `create(DownloadImageRequestSchema)` to create a new message.
 */
export declare const DownloadImageRequestSchema: GenMessage<DownloadImageRequest>;

/**
 * DownloadImageResponse is the streamed response message containing a chunk of the image's data.
 * The first chunk may include file metadata.
 *
 * @generated from message pidx.image.v1.DownloadImageResponse
 */
export declare type DownloadImageResponse = Message<"pidx.image.v1.DownloadImageResponse"> & {
  /**
   * A chunk of the image's binary data.
   *
   * @generated from field: bytes chunk = 1;
   */
  chunk: Uint8Array;

  /**
   * The metadata of the image file. Only present in the first chunk.
   *
   * @generated from field: optional pidx.image.v1.File file = 2;
   */
  file?: File;
};

/**
 * Describes the message pidx.image.v1.DownloadImageResponse.
 * Use `create(DownloadImageResponseSchema)` to create a new message.
 */
export declare const DownloadImageResponseSchema: GenMessage<DownloadImageResponse>;

/**
 * DownloadImageFileRequest is the request message for downloading a specific image file's content.
 *
 * @generated from message pidx.image.v1.DownloadImageFileRequest
 */
export declare type DownloadImageFileRequest = Message<"pidx.image.v1.DownloadImageFileRequest"> & {
  /**
   * The unique identifier of the image file to download.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message pidx.image.v1.DownloadImageFileRequest.
 * Use `create(DownloadImageFileRequestSchema)` to create a new message.
 */
export declare const DownloadImageFileRequestSchema: GenMessage<DownloadImageFileRequest>;

/**
 * DownloadImageFileResponse is the streamed response message containing a chunk of the image file's data.
 *
 * @generated from message pidx.image.v1.DownloadImageFileResponse
 */
export declare type DownloadImageFileResponse = Message<"pidx.image.v1.DownloadImageFileResponse"> & {
  /**
   * A chunk of the image file's binary data.
   *
   * @generated from field: bytes chunk = 1;
   */
  chunk: Uint8Array;
};

/**
 * Describes the message pidx.image.v1.DownloadImageFileResponse.
 * Use `create(DownloadImageFileResponseSchema)` to create a new message.
 */
export declare const DownloadImageFileResponseSchema: GenMessage<DownloadImageFileResponse>;

/**
 * UploadImageFileRequest is the streamed request message for uploading an image file's content.
 *
 * @generated from message pidx.image.v1.UploadImageFileRequest
 */
export declare type UploadImageFileRequest = Message<"pidx.image.v1.UploadImageFileRequest"> & {
  /**
   * A chunk of the image file's binary data to upload.
   *
   * @generated from field: bytes chunk = 1;
   */
  chunk: Uint8Array;

  /**
   * The source of the image file. Must be provided in the first chunk.
   *
   * @generated from field: optional pidx.blob.v1.Source source = 2;
   */
  source?: Source;
};

/**
 * Describes the message pidx.image.v1.UploadImageFileRequest.
 * Use `create(UploadImageFileRequestSchema)` to create a new message.
 */
export declare const UploadImageFileRequestSchema: GenMessage<UploadImageFileRequest>;

/**
 * UploadImageFileResponse is the response message containing the metadata of the uploaded image file.
 *
 * @generated from message pidx.image.v1.UploadImageFileResponse
 */
export declare type UploadImageFileResponse = Message<"pidx.image.v1.UploadImageFileResponse"> & {
  /**
   * The metadata of the uploaded image file.
   *
   * @generated from field: pidx.image.v1.File file = 1;
   */
  file?: File;
};

/**
 * Describes the message pidx.image.v1.UploadImageFileResponse.
 * Use `create(UploadImageFileResponseSchema)` to create a new message.
 */
export declare const UploadImageFileResponseSchema: GenMessage<UploadImageFileResponse>;

/**
 * DeleteImageRequest is the request message for deleting an image and all associated files.
 *
 * @generated from message pidx.image.v1.DeleteImageRequest
 */
export declare type DeleteImageRequest = Message<"pidx.image.v1.DeleteImageRequest"> & {
  /**
   * The unique identifier of the image to delete.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message pidx.image.v1.DeleteImageRequest.
 * Use `create(DeleteImageRequestSchema)` to create a new message.
 */
export declare const DeleteImageRequestSchema: GenMessage<DeleteImageRequest>;

/**
 * DeleteImageResponse is the response message containing the metadata of the deleted image.
 *
 * @generated from message pidx.image.v1.DeleteImageResponse
 */
export declare type DeleteImageResponse = Message<"pidx.image.v1.DeleteImageResponse"> & {
  /**
   * The metadata of the deleted image.
   *
   * @generated from field: pidx.image.v1.Image image = 1;
   */
  image?: Image;
};

/**
 * Describes the message pidx.image.v1.DeleteImageResponse.
 * Use `create(DeleteImageResponseSchema)` to create a new message.
 */
export declare const DeleteImageResponseSchema: GenMessage<DeleteImageResponse>;

/**
 * DeleteImageFileRequest is the request message for deleting a specific image file.
 *
 * @generated from message pidx.image.v1.DeleteImageFileRequest
 */
export declare type DeleteImageFileRequest = Message<"pidx.image.v1.DeleteImageFileRequest"> & {
  /**
   * The unique identifier of the image file to delete.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message pidx.image.v1.DeleteImageFileRequest.
 * Use `create(DeleteImageFileRequestSchema)` to create a new message.
 */
export declare const DeleteImageFileRequestSchema: GenMessage<DeleteImageFileRequest>;

/**
 * DeleteImageFileResponse is the response message containing the metadata of the deleted image file.
 *
 * @generated from message pidx.image.v1.DeleteImageFileResponse
 */
export declare type DeleteImageFileResponse = Message<"pidx.image.v1.DeleteImageFileResponse"> & {
  /**
   * The metadata of the deleted image file.
   *
   * @generated from field: pidx.image.v1.File file = 1;
   */
  file?: File;
};

/**
 * Describes the message pidx.image.v1.DeleteImageFileResponse.
 * Use `create(DeleteImageFileResponseSchema)` to create a new message.
 */
export declare const DeleteImageFileResponseSchema: GenMessage<DeleteImageFileResponse>;

/**
 * ImageService provides operations for managing images and their associated files.
 *
 * @generated from service pidx.image.v1.ImageService
 */
export declare const ImageService: GenService<{
  /**
   * GetImage retrieves metadata for an image by its unique identifier.
   *
   * @generated from rpc pidx.image.v1.ImageService.GetImage
   */
  getImage: {
    methodKind: "unary";
    input: typeof GetImageRequestSchema;
    output: typeof GetImageResponseSchema;
  },
  /**
   * DownloadImage streams the binary content of an image in chunks.
   * The metadata of the image is included in the first chunk.
   *
   * @generated from rpc pidx.image.v1.ImageService.DownloadImage
   */
  downloadImage: {
    methodKind: "server_streaming";
    input: typeof DownloadImageRequestSchema;
    output: typeof DownloadImageResponseSchema;
  },
  /**
   * DownloadImageFile streams the binary content of a specific image file in chunks.
   * The metadata of the image file is included in the first chunk.
   *
   * @generated from rpc pidx.image.v1.ImageService.DownloadImageFile
   */
  downloadImageFile: {
    methodKind: "server_streaming";
    input: typeof DownloadImageFileRequestSchema;
    output: typeof DownloadImageFileResponseSchema;
  },
  /**
   * UploadImageFile uploads an image file by streaming its binary content in chunks.
   *
   * @generated from rpc pidx.image.v1.ImageService.UploadImageFile
   */
  uploadImageFile: {
    methodKind: "client_streaming";
    input: typeof UploadImageFileRequestSchema;
    output: typeof UploadImageFileResponseSchema;
  },
  /**
   * DeleteImage deletes an image and all associated files.
   *
   * @generated from rpc pidx.image.v1.ImageService.DeleteImage
   */
  deleteImage: {
    methodKind: "unary";
    input: typeof DeleteImageRequestSchema;
    output: typeof DeleteImageResponseSchema;
  },
  /**
   * DeleteImageFile deletes a specific image file.
   *
   * @generated from rpc pidx.image.v1.ImageService.DeleteImageFile
   */
  deleteImageFile: {
    methodKind: "unary";
    input: typeof DeleteImageFileRequestSchema;
    output: typeof DeleteImageFileResponseSchema;
  },
}>;

