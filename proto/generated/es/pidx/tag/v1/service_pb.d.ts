// @generated by protoc-gen-es v2.2.5
// @generated from file pidx/tag/v1/service.proto (package pidx.tag.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Tag, TagAssignment } from "./tag_pb";
import type { FieldMask } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file pidx/tag/v1/service.proto.
 */
export declare const file_pidx_tag_v1_service: GenFile;

/**
 * / Request message for creating a tag.
 *
 * @generated from message pidx.tag.v1.CreateTagRequest
 */
export declare type CreateTagRequest = Message<"pidx.tag.v1.CreateTagRequest"> & {
  /**
   * / The tag to create. The id field must be unset.
   *
   * @generated from field: pidx.tag.v1.Tag tag = 1;
   */
  tag?: Tag;
};

/**
 * Describes the message pidx.tag.v1.CreateTagRequest.
 * Use `create(CreateTagRequestSchema)` to create a new message.
 */
export declare const CreateTagRequestSchema: GenMessage<CreateTagRequest>;

/**
 * / Response message for CreateTag.
 *
 * @generated from message pidx.tag.v1.CreateTagResponse
 */
export declare type CreateTagResponse = Message<"pidx.tag.v1.CreateTagResponse"> & {
  /**
   * / The newly created tag, including the server-assigned id.
   *
   * @generated from field: pidx.tag.v1.Tag tag = 1;
   */
  tag?: Tag;
};

/**
 * Describes the message pidx.tag.v1.CreateTagResponse.
 * Use `create(CreateTagResponseSchema)` to create a new message.
 */
export declare const CreateTagResponseSchema: GenMessage<CreateTagResponse>;

/**
 * / Request message for retrieving a tag.
 *
 * @generated from message pidx.tag.v1.GetTagRequest
 */
export declare type GetTagRequest = Message<"pidx.tag.v1.GetTagRequest"> & {
  /**
   * / The unique id of the tag to retrieve.
   * / This field must be non-empty.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message pidx.tag.v1.GetTagRequest.
 * Use `create(GetTagRequestSchema)` to create a new message.
 */
export declare const GetTagRequestSchema: GenMessage<GetTagRequest>;

/**
 * / Response message for GetTag.
 *
 * @generated from message pidx.tag.v1.GetTagResponse
 */
export declare type GetTagResponse = Message<"pidx.tag.v1.GetTagResponse"> & {
  /**
   * / The tag corresponding to the requested id.
   * / If the tag does not exist, the response will be empty and an error will be returned.
   *
   * @generated from field: pidx.tag.v1.Tag tag = 1;
   */
  tag?: Tag;
};

/**
 * Describes the message pidx.tag.v1.GetTagResponse.
 * Use `create(GetTagResponseSchema)` to create a new message.
 */
export declare const GetTagResponseSchema: GenMessage<GetTagResponse>;

/**
 * / Request message for updating a tag.
 *
 * @generated from message pidx.tag.v1.UpdateTagRequest
 */
export declare type UpdateTagRequest = Message<"pidx.tag.v1.UpdateTagRequest"> & {
  /**
   * / The tag to update.
   * / The tag's id field must be set and correspond to an existing tag.
   *
   * @generated from field: pidx.tag.v1.Tag tag = 1;
   */
  tag?: Tag;

  /**
   * / The list of fields to update, as a FieldMask.
   * / If not set, all updatable fields will be overwritten.
   * / Fields not included in the mask will remain unchanged.
   *
   * @generated from field: optional google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message pidx.tag.v1.UpdateTagRequest.
 * Use `create(UpdateTagRequestSchema)` to create a new message.
 */
export declare const UpdateTagRequestSchema: GenMessage<UpdateTagRequest>;

/**
 * / Response message for UpdateTag.
 *
 * @generated from message pidx.tag.v1.UpdateTagResponse
 */
export declare type UpdateTagResponse = Message<"pidx.tag.v1.UpdateTagResponse"> & {
  /**
   * / The updated tag after applying the changes.
   *
   * @generated from field: pidx.tag.v1.Tag tag = 1;
   */
  tag?: Tag;
};

/**
 * Describes the message pidx.tag.v1.UpdateTagResponse.
 * Use `create(UpdateTagResponseSchema)` to create a new message.
 */
export declare const UpdateTagResponseSchema: GenMessage<UpdateTagResponse>;

/**
 * / Request message for deleting a tag.
 *
 * @generated from message pidx.tag.v1.DeleteTagRequest
 */
export declare type DeleteTagRequest = Message<"pidx.tag.v1.DeleteTagRequest"> & {
  /**
   * / The unique id of the tag to delete.
   * / This field must be non-empty.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message pidx.tag.v1.DeleteTagRequest.
 * Use `create(DeleteTagRequestSchema)` to create a new message.
 */
export declare const DeleteTagRequestSchema: GenMessage<DeleteTagRequest>;

/**
 * / Response message for DeleteTag.
 *
 * @generated from message pidx.tag.v1.DeleteTagResponse
 */
export declare type DeleteTagResponse = Message<"pidx.tag.v1.DeleteTagResponse"> & {
  /**
   * / The tag that was deleted.
   * / If the tag did not exist, this field will be empty and an error will be returned.
   *
   * @generated from field: pidx.tag.v1.Tag tag = 1;
   */
  tag?: Tag;
};

/**
 * Describes the message pidx.tag.v1.DeleteTagResponse.
 * Use `create(DeleteTagResponseSchema)` to create a new message.
 */
export declare const DeleteTagResponseSchema: GenMessage<DeleteTagResponse>;

/**
 * / Request message for retrieving tag assignments.
 * / This can be used to list all assignments for a given tag or entity.
 *
 * @generated from message pidx.tag.v1.GetTagAssignmentsRequest
 */
export declare type GetTagAssignmentsRequest = Message<"pidx.tag.v1.GetTagAssignmentsRequest"> & {
  /**
   * / The unique id of the tag or entity whose assignments are to be listed.
   * / This field must be non-empty.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message pidx.tag.v1.GetTagAssignmentsRequest.
 * Use `create(GetTagAssignmentsRequestSchema)` to create a new message.
 */
export declare const GetTagAssignmentsRequestSchema: GenMessage<GetTagAssignmentsRequest>;

/**
 * / Response message for GetTagAssignments.
 *
 * @generated from message pidx.tag.v1.GetTagAssignmentsResponse
 */
export declare type GetTagAssignmentsResponse = Message<"pidx.tag.v1.GetTagAssignmentsResponse"> & {
  /**
   * / The list of tag assignments matching the request.
   *
   * @generated from field: repeated pidx.tag.v1.TagAssignment assignments = 1;
   */
  assignments: TagAssignment[];
};

/**
 * Describes the message pidx.tag.v1.GetTagAssignmentsResponse.
 * Use `create(GetTagAssignmentsResponseSchema)` to create a new message.
 */
export declare const GetTagAssignmentsResponseSchema: GenMessage<GetTagAssignmentsResponse>;

/**
 * / Request message for creating one or more tag assignments.
 *
 * @generated from message pidx.tag.v1.CreateTagAssignmentRequest
 */
export declare type CreateTagAssignmentRequest = Message<"pidx.tag.v1.CreateTagAssignmentRequest"> & {
  /**
   * / The list of tag assignments to create. Each assignment must not have an id set.
   *
   * @generated from field: repeated pidx.tag.v1.TagAssignment assignments = 1;
   */
  assignments: TagAssignment[];
};

/**
 * Describes the message pidx.tag.v1.CreateTagAssignmentRequest.
 * Use `create(CreateTagAssignmentRequestSchema)` to create a new message.
 */
export declare const CreateTagAssignmentRequestSchema: GenMessage<CreateTagAssignmentRequest>;

/**
 * / Response message for CreateTagAssignment.
 * / Returns the created tag assignment. If multiple assignments were created, only the first is returned.
 *
 * @generated from message pidx.tag.v1.CreateTagAssignmentResponse
 */
export declare type CreateTagAssignmentResponse = Message<"pidx.tag.v1.CreateTagAssignmentResponse"> & {
  /**
   * / The created tag assignment, including its assigned id.
   *
   * @generated from field: pidx.tag.v1.TagAssignment assignment = 1;
   */
  assignment?: TagAssignment;
};

/**
 * Describes the message pidx.tag.v1.CreateTagAssignmentResponse.
 * Use `create(CreateTagAssignmentResponseSchema)` to create a new message.
 */
export declare const CreateTagAssignmentResponseSchema: GenMessage<CreateTagAssignmentResponse>;

/**
 * / Request message for deleting a tag assignment.
 *
 * @generated from message pidx.tag.v1.DeleteTagAssignmentRequest
 */
export declare type DeleteTagAssignmentRequest = Message<"pidx.tag.v1.DeleteTagAssignmentRequest"> & {
  /**
   * / The unique id of the tag assignment to delete.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message pidx.tag.v1.DeleteTagAssignmentRequest.
 * Use `create(DeleteTagAssignmentRequestSchema)` to create a new message.
 */
export declare const DeleteTagAssignmentRequestSchema: GenMessage<DeleteTagAssignmentRequest>;

/**
 * / Response message for DeleteTagAssignment.
 *
 * @generated from message pidx.tag.v1.DeleteTagAssignmentResponse
 */
export declare type DeleteTagAssignmentResponse = Message<"pidx.tag.v1.DeleteTagAssignmentResponse"> & {
  /**
   * / The id of the tag assignment that was deleted.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message pidx.tag.v1.DeleteTagAssignmentResponse.
 * Use `create(DeleteTagAssignmentResponseSchema)` to create a new message.
 */
export declare const DeleteTagAssignmentResponseSchema: GenMessage<DeleteTagAssignmentResponse>;

/**
 * / TagService provides Create, Read, Update, and Delete (CRUD) operations for Tag resources,
 * / as well as management of tag assignments to entities. Tags are used to categorize or label entities
 * / within the system, enabling flexible organization and search.
 *
 * @generated from service pidx.tag.v1.TagService
 */
export declare const TagService: GenService<{
  /**
   * / Creates a new tag resource.
   * / The provided tag must not have an id set; the server will assign one.
   *
   * @generated from rpc pidx.tag.v1.TagService.CreateTag
   */
  createTag: {
    methodKind: "unary";
    input: typeof CreateTagRequestSchema;
    output: typeof CreateTagResponseSchema;
  },
  /**
   * / Retrieves a tag resource by its unique id.
   * / Returns the tag if found, or a NOT_FOUND error if the tag does not exist.
   *
   * @generated from rpc pidx.tag.v1.TagService.GetTag
   */
  getTag: {
    methodKind: "unary";
    input: typeof GetTagRequestSchema;
    output: typeof GetTagResponseSchema;
  },
  /**
   * / Updates an existing tag resource.
   * / Only the fields specified in the update_mask will be updated; other fields will remain unchanged.
   * / Returns the updated tag.
   *
   * @generated from rpc pidx.tag.v1.TagService.UpdateTag
   */
  updateTag: {
    methodKind: "unary";
    input: typeof UpdateTagRequestSchema;
    output: typeof UpdateTagResponseSchema;
  },
  /**
   * / Retrieves all tag assignments for a given tag or entity.
   *
   * @generated from rpc pidx.tag.v1.TagService.GetTagAssignments
   */
  getTagAssignments: {
    methodKind: "unary";
    input: typeof GetTagAssignmentsRequestSchema;
    output: typeof GetTagAssignmentsResponseSchema;
  },
  /**
   * / Creates one or more tag assignments, associating tags with entities.
   *
   * @generated from rpc pidx.tag.v1.TagService.CreateTagAssignment
   */
  createTagAssignment: {
    methodKind: "unary";
    input: typeof CreateTagAssignmentRequestSchema;
    output: typeof CreateTagAssignmentResponseSchema;
  },
  /**
   * / Deletes a tag assignment by its unique id.
   *
   * @generated from rpc pidx.tag.v1.TagService.DeleteTagAssignment
   */
  deleteTagAssignment: {
    methodKind: "unary";
    input: typeof DeleteTagAssignmentRequestSchema;
    output: typeof DeleteTagAssignmentResponseSchema;
  },
}>;

