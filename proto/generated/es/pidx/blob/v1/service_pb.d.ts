// @generated by protoc-gen-es v2.2.5
// @generated from file pidx/blob/v1/service.proto (package pidx.blob.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Blob } from "./blob_pb";
import type { Source } from "./source_pb";

/**
 * Describes the file pidx/blob/v1/service.proto.
 */
export declare const file_pidx_blob_v1_service: GenFile;

/**
 * GetBlobRequest is the request message for retrieving a blob's metadata.
 *
 * @generated from message pidx.blob.v1.GetBlobRequest
 */
export declare type GetBlobRequest = Message<"pidx.blob.v1.GetBlobRequest"> & {
  /**
   * The unique identifier of the blob to retrieve.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message pidx.blob.v1.GetBlobRequest.
 * Use `create(GetBlobRequestSchema)` to create a new message.
 */
export declare const GetBlobRequestSchema: GenMessage<GetBlobRequest>;

/**
 * GetBlobResponse is the response message containing the blob's metadata.
 *
 * @generated from message pidx.blob.v1.GetBlobResponse
 */
export declare type GetBlobResponse = Message<"pidx.blob.v1.GetBlobResponse"> & {
  /**
   * The metadata of the requested blob.
   *
   * @generated from field: pidx.blob.v1.Blob blob = 1;
   */
  blob?: Blob;
};

/**
 * Describes the message pidx.blob.v1.GetBlobResponse.
 * Use `create(GetBlobResponseSchema)` to create a new message.
 */
export declare const GetBlobResponseSchema: GenMessage<GetBlobResponse>;

/**
 * DownloadBlobRequest is the request message for downloading a blob's content.
 *
 * @generated from message pidx.blob.v1.DownloadBlobRequest
 */
export declare type DownloadBlobRequest = Message<"pidx.blob.v1.DownloadBlobRequest"> & {
  /**
   * The unique identifier of the blob to download.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message pidx.blob.v1.DownloadBlobRequest.
 * Use `create(DownloadBlobRequestSchema)` to create a new message.
 */
export declare const DownloadBlobRequestSchema: GenMessage<DownloadBlobRequest>;

/**
 * DownloadBlobResponse is the streamed response message containing a chunk of the blob's data.
 *
 * @generated from message pidx.blob.v1.DownloadBlobResponse
 */
export declare type DownloadBlobResponse = Message<"pidx.blob.v1.DownloadBlobResponse"> & {
  /**
   * A chunk of the blob's binary data.
   *
   * @generated from field: bytes chunk = 1;
   */
  chunk: Uint8Array;
};

/**
 * Describes the message pidx.blob.v1.DownloadBlobResponse.
 * Use `create(DownloadBlobResponseSchema)` to create a new message.
 */
export declare const DownloadBlobResponseSchema: GenMessage<DownloadBlobResponse>;

/**
 * UploadBlobRequest is the streamed request message for uploading a blob's content.
 *
 * @generated from message pidx.blob.v1.UploadBlobRequest
 */
export declare type UploadBlobRequest = Message<"pidx.blob.v1.UploadBlobRequest"> & {
  /**
   * A chunk of the blob's binary data to upload.
   *
   * @generated from field: bytes chunk = 1;
   */
  chunk: Uint8Array;

  /**
   * The source of the blob. Must be provided in the first chunk.
   *
   * @generated from field: optional pidx.blob.v1.Source source = 2;
   */
  source?: Source;
};

/**
 * Describes the message pidx.blob.v1.UploadBlobRequest.
 * Use `create(UploadBlobRequestSchema)` to create a new message.
 */
export declare const UploadBlobRequestSchema: GenMessage<UploadBlobRequest>;

/**
 * UploadBlobResponse is the response message containing the metadata of the uploaded blob.
 *
 * @generated from message pidx.blob.v1.UploadBlobResponse
 */
export declare type UploadBlobResponse = Message<"pidx.blob.v1.UploadBlobResponse"> & {
  /**
   * The metadata of the uploaded blob.
   *
   * @generated from field: pidx.blob.v1.Blob blob = 1;
   */
  blob?: Blob;
};

/**
 * Describes the message pidx.blob.v1.UploadBlobResponse.
 * Use `create(UploadBlobResponseSchema)` to create a new message.
 */
export declare const UploadBlobResponseSchema: GenMessage<UploadBlobResponse>;

/**
 * DeleteBlobDataRequest is the request message for deleting the binary data of a blob.
 *
 * @generated from message pidx.blob.v1.DeleteBlobDataRequest
 */
export declare type DeleteBlobDataRequest = Message<"pidx.blob.v1.DeleteBlobDataRequest"> & {
  /**
   * The unique identifier of the blob to delete the binary data of.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message pidx.blob.v1.DeleteBlobDataRequest.
 * Use `create(DeleteBlobDataRequestSchema)` to create a new message.
 */
export declare const DeleteBlobDataRequestSchema: GenMessage<DeleteBlobDataRequest>;

/**
 * DeleteBlobDataResponse is the response message containing the metadata of the deleted blob.
 *
 * @generated from message pidx.blob.v1.DeleteBlobDataResponse
 */
export declare type DeleteBlobDataResponse = Message<"pidx.blob.v1.DeleteBlobDataResponse"> & {
  /**
   * The metadata of the deleted blob.
   *
   * @generated from field: pidx.blob.v1.Blob blob = 1;
   */
  blob?: Blob;
};

/**
 * Describes the message pidx.blob.v1.DeleteBlobDataResponse.
 * Use `create(DeleteBlobDataResponseSchema)` to create a new message.
 */
export declare const DeleteBlobDataResponseSchema: GenMessage<DeleteBlobDataResponse>;

/**
 * DeleteBlobRequest is the request message for deleting a blob.
 *
 * @generated from message pidx.blob.v1.DeleteBlobRequest
 */
export declare type DeleteBlobRequest = Message<"pidx.blob.v1.DeleteBlobRequest"> & {
  /**
   * The unique identifier of the blob to delete.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message pidx.blob.v1.DeleteBlobRequest.
 * Use `create(DeleteBlobRequestSchema)` to create a new message.
 */
export declare const DeleteBlobRequestSchema: GenMessage<DeleteBlobRequest>;

/**
 * DeleteBlobResponse is the response message containing the metadata of the deleted blob.
 *
 * @generated from message pidx.blob.v1.DeleteBlobResponse
 */
export declare type DeleteBlobResponse = Message<"pidx.blob.v1.DeleteBlobResponse"> & {
  /**
   * The metadata of the deleted blob.
   *
   * @generated from field: pidx.blob.v1.Blob blob = 1;
   */
  blob?: Blob;
};

/**
 * Describes the message pidx.blob.v1.DeleteBlobResponse.
 * Use `create(DeleteBlobResponseSchema)` to create a new message.
 */
export declare const DeleteBlobResponseSchema: GenMessage<DeleteBlobResponse>;

/**
 * AddSourceRequest is the request message for associating a source with a blob.
 *
 * @generated from message pidx.blob.v1.AddSourceRequest
 */
export declare type AddSourceRequest = Message<"pidx.blob.v1.AddSourceRequest"> & {
  /**
   * The unique identifier of the blob to associate the source with.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The source information to add to the blob.
   *
   * @generated from field: pidx.blob.v1.Source source = 2;
   */
  source?: Source;
};

/**
 * Describes the message pidx.blob.v1.AddSourceRequest.
 * Use `create(AddSourceRequestSchema)` to create a new message.
 */
export declare const AddSourceRequestSchema: GenMessage<AddSourceRequest>;

/**
 * AddSourceResponse is the response message containing the updated blob metadata.
 *
 * @generated from message pidx.blob.v1.AddSourceResponse
 */
export declare type AddSourceResponse = Message<"pidx.blob.v1.AddSourceResponse"> & {
  /**
   * The metadata of the blob after adding the source.
   *
   * @generated from field: pidx.blob.v1.Blob blob = 1;
   */
  blob?: Blob;
};

/**
 * Describes the message pidx.blob.v1.AddSourceResponse.
 * Use `create(AddSourceResponseSchema)` to create a new message.
 */
export declare const AddSourceResponseSchema: GenMessage<AddSourceResponse>;

/**
 * RemoveSourceRequest is the request message for disassociating a source from a blob.
 *
 * @generated from message pidx.blob.v1.RemoveSourceRequest
 */
export declare type RemoveSourceRequest = Message<"pidx.blob.v1.RemoveSourceRequest"> & {
  /**
   * The unique identifier of the blob to remove the source from.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message pidx.blob.v1.RemoveSourceRequest.
 * Use `create(RemoveSourceRequestSchema)` to create a new message.
 */
export declare const RemoveSourceRequestSchema: GenMessage<RemoveSourceRequest>;

/**
 * RemoveSourceResponse is the response message containing the updated blob metadata.
 *
 * @generated from message pidx.blob.v1.RemoveSourceResponse
 */
export declare type RemoveSourceResponse = Message<"pidx.blob.v1.RemoveSourceResponse"> & {
  /**
   * The metadata of the blob after removing the source.
   *
   * @generated from field: pidx.blob.v1.Blob blob = 1;
   */
  blob?: Blob;
};

/**
 * Describes the message pidx.blob.v1.RemoveSourceResponse.
 * Use `create(RemoveSourceResponseSchema)` to create a new message.
 */
export declare const RemoveSourceResponseSchema: GenMessage<RemoveSourceResponse>;

/**
 * BlobService is a service for managing blobs, including retrieval, upload, download, deletion, and source management.
 *
 * @generated from service pidx.blob.v1.BlobService
 */
export declare const BlobService: GenService<{
  /**
   * GetBlob retrieves metadata for a blob by its unique identifier.
   *
   * @generated from rpc pidx.blob.v1.BlobService.GetBlob
   */
  getBlob: {
    methodKind: "unary";
    input: typeof GetBlobRequestSchema;
    output: typeof GetBlobResponseSchema;
  },
  /**
   * DownloadBlob streams the binary content of a blob in chunks.
   *
   * @generated from rpc pidx.blob.v1.BlobService.DownloadBlob
   */
  downloadBlob: {
    methodKind: "server_streaming";
    input: typeof DownloadBlobRequestSchema;
    output: typeof DownloadBlobResponseSchema;
  },
  /**
   * UploadBlob uploads a blob by streaming its binary content in chunks.
   *
   * @generated from rpc pidx.blob.v1.BlobService.UploadBlob
   */
  uploadBlob: {
    methodKind: "client_streaming";
    input: typeof UploadBlobRequestSchema;
    output: typeof UploadBlobResponseSchema;
  },
  /**
   * DeleteBlobData deletes the binary data of a blob. This does not delete the blob's metadata.
   *
   * @generated from rpc pidx.blob.v1.BlobService.DeleteBlobData
   */
  deleteBlobData: {
    methodKind: "unary";
    input: typeof DeleteBlobDataRequestSchema;
    output: typeof DeleteBlobDataResponseSchema;
  },
  /**
   * DeleteBlob deletes the binary data and metadata of a blob.
   *
   * @generated from rpc pidx.blob.v1.BlobService.DeleteBlob
   */
  deleteBlob: {
    methodKind: "unary";
    input: typeof DeleteBlobRequestSchema;
    output: typeof DeleteBlobResponseSchema;
  },
  /**
   * AddSource associates a new source with an existing blob.
   *
   * @generated from rpc pidx.blob.v1.BlobService.AddSource
   */
  addSource: {
    methodKind: "unary";
    input: typeof AddSourceRequestSchema;
    output: typeof AddSourceResponseSchema;
  },
  /**
   * RemoveSource disassociates a source from a blob.
   *
   * @generated from rpc pidx.blob.v1.BlobService.RemoveSource
   */
  removeSource: {
    methodKind: "unary";
    input: typeof RemoveSourceRequestSchema;
    output: typeof RemoveSourceResponseSchema;
  },
}>;

