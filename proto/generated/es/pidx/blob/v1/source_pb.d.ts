// @generated by protoc-gen-es v2.2.5
// @generated from file pidx/blob/v1/source.proto (package pidx.blob.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file pidx/blob/v1/source.proto.
 */
export declare const file_pidx_blob_v1_source: GenFile;

/**
 * Source represents the origin or provenance of a blob.
 * It describes where the blob's data was originally obtained from.
 * This message is used to track the source of a blob for purposes such as auditing, deduplication, or attribution.
 *
 * @generated from message pidx.blob.v1.Source
 */
export declare type Source = Message<"pidx.blob.v1.Source"> & {
  /**
   * The unique identifier for the source.
   * This must be a non-empty string and is typically assigned by the server.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The type of source for the blob.
   *
   * @generated from oneof pidx.blob.v1.Source.type
   */
  type: {
    /**
     * The blob was sourced from a URI (Uniform Resource Identifier), such as HTTP, FTP, S3, etc.
     * This is used when the blob was downloaded or retrieved from a network location.
     *
     * @generated from field: pidx.blob.v1.UriSource uri = 2;
     */
    value: UriSource;
    case: "uri";
  } | {
    /**
     * The blob was sourced from a local file on a specific host or machine.
     * This is used when the blob originated from a file system, either local or remote.
     *
     * @generated from field: pidx.blob.v1.LocalFileSource local_file = 3;
     */
    value: LocalFileSource;
    case: "localFile";
  } | {
    /**
     * The blob was sourced from a file contained within a torrent.
     * This is used when the blob was extracted from a BitTorrent resource.
     *
     * @generated from field: pidx.blob.v1.TorrentSource torrent = 4;
     */
    value: TorrentSource;
    case: "torrent";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message pidx.blob.v1.Source.
 * Use `create(SourceSchema)` to create a new message.
 */
export declare const SourceSchema: GenMessage<Source>;

/**
 * UriSource describes a blob that originated from a URI.
 *
 * @generated from message pidx.blob.v1.UriSource
 */
export declare type UriSource = Message<"pidx.blob.v1.UriSource"> & {
  /**
   * The URI from which the blob was obtained (e.g., "https://example.com/file.jpg").
   * This should be a valid URI pointing to the original location of the blob.
   *
   * @generated from field: string uri = 1;
   */
  uri: string;
};

/**
 * Describes the message pidx.blob.v1.UriSource.
 * Use `create(UriSourceSchema)` to create a new message.
 */
export declare const UriSourceSchema: GenMessage<UriSource>;

/**
 * LocalFileSource describes a blob that originated from a file on a local or remote host.
 *
 * @generated from message pidx.blob.v1.LocalFileSource
 */
export declare type LocalFileSource = Message<"pidx.blob.v1.LocalFileSource"> & {
  /**
   * The hostname or network identifier of the machine where the file was located.
   * This can be a DNS name, IP address, or other unique identifier for the host.
   *
   * @generated from field: string hostname = 1;
   */
  hostname: string;

  /**
   * The absolute or relative path to the file on the specified host.
   * This should specify the location of the file within the host's file system.
   *
   * @generated from field: string path = 2;
   */
  path: string;
};

/**
 * Describes the message pidx.blob.v1.LocalFileSource.
 * Use `create(LocalFileSourceSchema)` to create a new message.
 */
export declare const LocalFileSourceSchema: GenMessage<LocalFileSource>;

/**
 * TorrentSource describes a blob that originated from a torrent.
 * This includes the torrent's info hash and the specific file name within the torrent.
 *
 * @generated from message pidx.blob.v1.TorrentSource
 */
export declare type TorrentSource = Message<"pidx.blob.v1.TorrentSource"> & {
  /**
   * The info hash of the torrent, which uniquely identifies the torrent.
   * For BitTorrent v1, this is a 20-byte SHA-1 hash.
   * For BitTorrent v2, this is a 32-byte SHA-256 hash (up to 64 bytes for hybrid torrents).
   *
   * @generated from field: bytes torrent_hash = 1;
   */
  torrentHash: Uint8Array;

  /**
   * The file name within the torrent that was used to create the blob.
   * This should match the name of the file as listed in the torrent's file list.
   *
   * @generated from field: string file_name = 2;
   */
  fileName: string;
};

/**
 * Describes the message pidx.blob.v1.TorrentSource.
 * Use `create(TorrentSourceSchema)` to create a new message.
 */
export declare const TorrentSourceSchema: GenMessage<TorrentSource>;

